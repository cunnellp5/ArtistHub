generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  firstName String
  lastName  String
  username  String     @unique
  posts     BlogPost[]
}

// TODO auth tables

// BLOGS
model BlogPost {
  id        Int         @id @default(autoincrement())
  published Boolean     @default(false)
  title     String
  slug      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation(fields: [authorId], references: [id])
  authorId  Int
  items     BlogItem[]
  images    BlogImage[]
}

model BlogItem {
  id         Int      @id @default(autoincrement())
  content    String
  order      Int
  title      String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId Int
}

model BlogImage {
  id         Int       @id @default(autoincrement())
  url        String
  order      Int
  BlogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
}

// TODO appointments >> users signed in
// This will be used for users creating appointments, we will want to create a secret black-book
// Admin can update the provile after a 'visit'
// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// TODO EPK tables
// model EPK {
//   id          Int      @id @default(autoincrement())
//   biography   String
//   discography String
//   photos      String
//   videos      String
//   tourDates   String
//   contactInfo String
//   pressCoverage String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   artist      User     @relation(fields: [artistId], references: [id])
//   artistId    Int @unique
// }
